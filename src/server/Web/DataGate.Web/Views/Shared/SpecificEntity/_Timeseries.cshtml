@model TimeSeriesViewModel

<div>
    <canvas id="canvas-chart-aum"></canvas>

    <div class="mt-3">
        <a class="btn btn-datagate"
           asp-area=""
           asp-route="timeseriesreports"
           asp-route-type="@Model.AreaName"
           asp-route-id="@Model.Id">
            @SharedLocalizer.GetHtmlString("Time Series Reports")
        </a>
    </div>
</div>

<script>
     // ________________________________________________________
     //
     // Chart js for Asset under management and share prices

    $(function () {
        //const ChartColors = [
        //    'rgb(54, 162, 235)',
        //    'rgb(255, 159, 64)',
        //    'rgb(255, 205, 86)',
        //    'rgb(75, 192, 192)',
        //    'rgb(153, 102, 255)',
        //    'rgb(255, 99, 132)',
        //    'rgb(201, 203, 207)'
        //];

        let chartData = [];

        const provider = @Html.Raw(Json.Serialize(Model.TSTypeProvider));
        const dates = @Html.Raw(Json.Serialize(Model.TSPriceDates));

        let pricesJson = @Json.Serialize(Model.TSAllPriceValues);
        let pricesArr = pricesJson
            .filter(ts => ts[2] === provider)
            .map(ts => parseFloat(ts[1]));

        //let arr = [5537335.32, 5395388.99, 5532726.53, 5755894.74,
        //    5033676.81, 5084669.12, 5163553.57, 5205828.06,
        //    5065253.11, 5111903.57, 4948932.06, 4409094.49, 4655016.69, 4654240.56];

        chartData.push({
            data: pricesArr,
            label: provider,
            backgroundColor: 'rgb(0, 86, 179)',
            borderColor: 'rgb(0, 86, 179)',
            fill: false,
        });

        @* $.each(@providers, function (index, provider) {

            chartData.push({
                data: pricesArr,
                label: provider,
                backgroundColor: ChartColors[index],
                borderColor: ChartColors[index],
                fill: false,
            });
        });*@

        let ctx = document.getElementById('canvas-chart-aum').getContext('2d');
        let chart = new Chart(ctx, setConfigChart(dates, chartData));

        function setConfigChart(dates, chartData) {
            let config = {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: chartData,
                },
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Time Series'
                    },
                    tooltips: {
                        mode: 'index',
                        intersect: false,
                    },
                    hover: {
                        mode: 'nearest',
                        intersect: true
                    },
                    scales: {
                        x: {
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Month'
                            }
                        },
                        y: {
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Value'
                            }
                        }
                    }
                }
            };
            return config;
        };
    });
</script>